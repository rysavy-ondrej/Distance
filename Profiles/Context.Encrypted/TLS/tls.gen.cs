//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Distance.Diagnostics.Tls {
    using Distance.Diagnostics.Dns;
    using Distance.Runtime;
    using Distance.Utils;
    using System;
    
    
    public partial class TlsCLientHello : Distance.Runtime.DistanceFact {
        
        private Int32 _FrameNumber;
        
        private Double _FrameTimeRelative;
        
        private String _IpSrc;
        
        private String _IpDst;
        
        private Int32 _TcpSrcport;
        
        private Int32 _TcpDstport;
        
        private Int32 _TlsRecordVersion;
        
        private Int32 _TlsHandshakeCipherSuitesLength;
        
        public static string Filter = "tls.handshake.type == 1";
        
        public static string[] Fields = new string[] {
                "frame.number",
                "frame.time_relative",
                "ip.src",
                "ip.dst",
                "tcp.srcport",
                "tcp.dstport",
                "tls.record.version",
                "tls.handshake.cipher_suites_length"};
        
        [FieldName("frame.number")]
        public virtual Int32 FrameNumber {
            get {
                return this._FrameNumber;
            }
            set {
                this._FrameNumber = value;
            }
        }
        
        [FieldName("frame.time_relative")]
        public virtual Double FrameTimeRelative {
            get {
                return this._FrameTimeRelative;
            }
            set {
                this._FrameTimeRelative = value;
            }
        }
        
        [FieldName("ip.src")]
        public virtual String IpSrc {
            get {
                return this._IpSrc;
            }
            set {
                this._IpSrc = value;
            }
        }
        
        [FieldName("ip.dst")]
        public virtual String IpDst {
            get {
                return this._IpDst;
            }
            set {
                this._IpDst = value;
            }
        }
        
        [FieldName("tcp.srcport")]
        public virtual Int32 TcpSrcport {
            get {
                return this._TcpSrcport;
            }
            set {
                this._TcpSrcport = value;
            }
        }
        
        [FieldName("tcp.dstport")]
        public virtual Int32 TcpDstport {
            get {
                return this._TcpDstport;
            }
            set {
                this._TcpDstport = value;
            }
        }
        
        [FieldName("tls.record.version")]
        public virtual Int32 TlsRecordVersion {
            get {
                return this._TlsRecordVersion;
            }
            set {
                this._TlsRecordVersion = value;
            }
        }
        
        [FieldName("tls.handshake.cipher_suites_length")]
        public virtual Int32 TlsHandshakeCipherSuitesLength {
            get {
                return this._TlsHandshakeCipherSuitesLength;
            }
            set {
                this._TlsHandshakeCipherSuitesLength = value;
            }
        }
        
        public override string ToString() {
            return string.Format("TlsCLientHello: frame.number={0} frame.time_relative={1} ip.src={2} ip.dst={3} tc" +
                    "p.srcport={4} tcp.dstport={5} tls.record.version={6} tls.handshake.cipher_suites" +
                    "_length={7}", Distance.Utils.StringUtils.ToString(this.FrameNumber), Distance.Utils.StringUtils.ToString(this.FrameTimeRelative), Distance.Utils.StringUtils.ToString(this.IpSrc), Distance.Utils.StringUtils.ToString(this.IpDst), Distance.Utils.StringUtils.ToString(this.TcpSrcport), Distance.Utils.StringUtils.ToString(this.TcpDstport), Distance.Utils.StringUtils.ToString(this.TlsRecordVersion), Distance.Utils.StringUtils.ToString(this.TlsHandshakeCipherSuitesLength));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.FrameNumber, this.FrameTimeRelative, this.IpSrc, this.IpDst, this.TcpSrcport, this.TcpDstport, this.TlsRecordVersion, this.TlsHandshakeCipherSuitesLength);
        }
        
        public override bool Equals(object obj) {
            TlsCLientHello that = obj as TlsCLientHello;
            return (((((((((that != null) 
                        && object.Equals(this.FrameNumber, that.FrameNumber)) 
                        && object.Equals(this.FrameTimeRelative, that.FrameTimeRelative)) 
                        && object.Equals(this.IpSrc, that.IpSrc)) 
                        && object.Equals(this.IpDst, that.IpDst)) 
                        && object.Equals(this.TcpSrcport, that.TcpSrcport)) 
                        && object.Equals(this.TcpDstport, that.TcpDstport)) 
                        && object.Equals(this.TlsRecordVersion, that.TlsRecordVersion)) 
                        && object.Equals(this.TlsHandshakeCipherSuitesLength, that.TlsHandshakeCipherSuitesLength));
        }
        
        public static TlsCLientHello Create(System.Func<string, string, string> mapper, string[] values) {
            TlsCLientHello newObj = new TlsCLientHello();
            newObj._FrameNumber = mapper.Invoke("frame.number", values[0]).ToInt32();
            newObj._FrameTimeRelative = mapper.Invoke("frame.time_relative", values[1]).ToDouble();
            newObj._IpSrc = mapper.Invoke("ip.src", values[2]).ToString();
            newObj._IpDst = mapper.Invoke("ip.dst", values[3]).ToString();
            newObj._TcpSrcport = mapper.Invoke("tcp.srcport", values[4]).ToInt32();
            newObj._TcpDstport = mapper.Invoke("tcp.dstport", values[5]).ToInt32();
            newObj._TlsRecordVersion = mapper.Invoke("tls.record.version", values[6]).ToInt32();
            newObj._TlsHandshakeCipherSuitesLength = mapper.Invoke("tls.handshake.cipher_suites_length", values[7]).ToInt32();
            return newObj;
        }
    }
    
    public partial class TlsServerHello : Distance.Runtime.DistanceFact {
        
        private Int32 _FrameNumber;
        
        private Double _FrameTimeRelative;
        
        private String _IpSrc;
        
        private String _IpDst;
        
        private Int32 _TcpSrcport;
        
        private Int32 _TcpDstport;
        
        private Int32 _TlsRecordVersion;
        
        private Int32 _TlsHandshakeCiphersuite;
        
        public static string Filter = "tls.handshake.type == 2";
        
        public static string[] Fields = new string[] {
                "frame.number",
                "frame.time_relative",
                "ip.src",
                "ip.dst",
                "tcp.srcport",
                "tcp.dstport",
                "tls.record.version",
                "tls.handshake.ciphersuite"};
        
        [FieldName("frame.number")]
        public virtual Int32 FrameNumber {
            get {
                return this._FrameNumber;
            }
            set {
                this._FrameNumber = value;
            }
        }
        
        [FieldName("frame.time_relative")]
        public virtual Double FrameTimeRelative {
            get {
                return this._FrameTimeRelative;
            }
            set {
                this._FrameTimeRelative = value;
            }
        }
        
        [FieldName("ip.src")]
        public virtual String IpSrc {
            get {
                return this._IpSrc;
            }
            set {
                this._IpSrc = value;
            }
        }
        
        [FieldName("ip.dst")]
        public virtual String IpDst {
            get {
                return this._IpDst;
            }
            set {
                this._IpDst = value;
            }
        }
        
        [FieldName("tcp.srcport")]
        public virtual Int32 TcpSrcport {
            get {
                return this._TcpSrcport;
            }
            set {
                this._TcpSrcport = value;
            }
        }
        
        [FieldName("tcp.dstport")]
        public virtual Int32 TcpDstport {
            get {
                return this._TcpDstport;
            }
            set {
                this._TcpDstport = value;
            }
        }
        
        [FieldName("tls.record.version")]
        public virtual Int32 TlsRecordVersion {
            get {
                return this._TlsRecordVersion;
            }
            set {
                this._TlsRecordVersion = value;
            }
        }
        
        [FieldName("tls.handshake.ciphersuite")]
        public virtual Int32 TlsHandshakeCiphersuite {
            get {
                return this._TlsHandshakeCiphersuite;
            }
            set {
                this._TlsHandshakeCiphersuite = value;
            }
        }
        
        public override string ToString() {
            return string.Format("TlsServerHello: frame.number={0} frame.time_relative={1} ip.src={2} ip.dst={3} tc" +
                    "p.srcport={4} tcp.dstport={5} tls.record.version={6} tls.handshake.ciphersuite={" +
                    "7}", Distance.Utils.StringUtils.ToString(this.FrameNumber), Distance.Utils.StringUtils.ToString(this.FrameTimeRelative), Distance.Utils.StringUtils.ToString(this.IpSrc), Distance.Utils.StringUtils.ToString(this.IpDst), Distance.Utils.StringUtils.ToString(this.TcpSrcport), Distance.Utils.StringUtils.ToString(this.TcpDstport), Distance.Utils.StringUtils.ToString(this.TlsRecordVersion), Distance.Utils.StringUtils.ToString(this.TlsHandshakeCiphersuite));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.FrameNumber, this.FrameTimeRelative, this.IpSrc, this.IpDst, this.TcpSrcport, this.TcpDstport, this.TlsRecordVersion, this.TlsHandshakeCiphersuite);
        }
        
        public override bool Equals(object obj) {
            TlsServerHello that = obj as TlsServerHello;
            return (((((((((that != null) 
                        && object.Equals(this.FrameNumber, that.FrameNumber)) 
                        && object.Equals(this.FrameTimeRelative, that.FrameTimeRelative)) 
                        && object.Equals(this.IpSrc, that.IpSrc)) 
                        && object.Equals(this.IpDst, that.IpDst)) 
                        && object.Equals(this.TcpSrcport, that.TcpSrcport)) 
                        && object.Equals(this.TcpDstport, that.TcpDstport)) 
                        && object.Equals(this.TlsRecordVersion, that.TlsRecordVersion)) 
                        && object.Equals(this.TlsHandshakeCiphersuite, that.TlsHandshakeCiphersuite));
        }
        
        public static TlsServerHello Create(System.Func<string, string, string> mapper, string[] values) {
            TlsServerHello newObj = new TlsServerHello();
            newObj._FrameNumber = mapper.Invoke("frame.number", values[0]).ToInt32();
            newObj._FrameTimeRelative = mapper.Invoke("frame.time_relative", values[1]).ToDouble();
            newObj._IpSrc = mapper.Invoke("ip.src", values[2]).ToString();
            newObj._IpDst = mapper.Invoke("ip.dst", values[3]).ToString();
            newObj._TcpSrcport = mapper.Invoke("tcp.srcport", values[4]).ToInt32();
            newObj._TcpDstport = mapper.Invoke("tcp.dstport", values[5]).ToInt32();
            newObj._TlsRecordVersion = mapper.Invoke("tls.record.version", values[6]).ToInt32();
            newObj._TlsHandshakeCiphersuite = mapper.Invoke("tls.handshake.ciphersuite", values[7]).ToInt32();
            return newObj;
        }
    }
    
    public partial class TlsHandshake : Distance.Runtime.DistanceDerived {
        
        private Double _Timestamp;
        
        private String _IpSrc;
        
        private String _IpDst;
        
        private Int32 _TcpSrcport;
        
        private Int32 _TcpDstport;
        
        private TlsCLientHello _ClientHello;
        
        private TlsServerHello _ServerHello;
        
        [FieldName("timestamp")]
        public virtual Double Timestamp {
            get {
                return this._Timestamp;
            }
            set {
                this._Timestamp = value;
            }
        }
        
        [FieldName("ipSrc")]
        public virtual String IpSrc {
            get {
                return this._IpSrc;
            }
            set {
                this._IpSrc = value;
            }
        }
        
        [FieldName("ipDst")]
        public virtual String IpDst {
            get {
                return this._IpDst;
            }
            set {
                this._IpDst = value;
            }
        }
        
        [FieldName("tcpSrcport")]
        public virtual Int32 TcpSrcport {
            get {
                return this._TcpSrcport;
            }
            set {
                this._TcpSrcport = value;
            }
        }
        
        [FieldName("tcpDstport")]
        public virtual Int32 TcpDstport {
            get {
                return this._TcpDstport;
            }
            set {
                this._TcpDstport = value;
            }
        }
        
        [FieldName("clientHello")]
        public virtual TlsCLientHello ClientHello {
            get {
                return this._ClientHello;
            }
            set {
                this._ClientHello = value;
            }
        }
        
        [FieldName("serverHello")]
        public virtual TlsServerHello ServerHello {
            get {
                return this._ServerHello;
            }
            set {
                this._ServerHello = value;
            }
        }
        
        public override string ToString() {
            return string.Format("TlsHandshake: timestamp={0} ipSrc={1} ipDst={2} tcpSrcport={3} tcpDstport={4} cli" +
                    "entHello={5} serverHello={6}", Distance.Utils.StringUtils.ToString(this.Timestamp), Distance.Utils.StringUtils.ToString(this.IpSrc), Distance.Utils.StringUtils.ToString(this.IpDst), Distance.Utils.StringUtils.ToString(this.TcpSrcport), Distance.Utils.StringUtils.ToString(this.TcpDstport), Distance.Utils.StringUtils.ToString(this.ClientHello), Distance.Utils.StringUtils.ToString(this.ServerHello));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Timestamp, this.IpSrc, this.IpDst, this.TcpSrcport, this.TcpDstport, this.ClientHello, this.ServerHello);
        }
        
        public override bool Equals(object obj) {
            TlsHandshake that = obj as TlsHandshake;
            return ((((((((that != null) 
                        && object.Equals(this.Timestamp, that.Timestamp)) 
                        && object.Equals(this.IpSrc, that.IpSrc)) 
                        && object.Equals(this.IpDst, that.IpDst)) 
                        && object.Equals(this.TcpSrcport, that.TcpSrcport)) 
                        && object.Equals(this.TcpDstport, that.TcpDstport)) 
                        && object.Equals(this.ClientHello, that.ClientHello)) 
                        && object.Equals(this.ServerHello, that.ServerHello));
        }
    }
    
    public partial class TlsWithDnsContextEvent : Distance.Runtime.DistanceEvent {
        
        private Double _Timestamp;
        
        private String _IpSrc;
        
        private String _IpDst;
        
        private Int32 _TcpSrcport;
        
        private Int32 _TcpDstport;
        
        private TlsHandshake _TlsHandshake;
        
        private DnsQueryResponse _DnsContext;
        
        [FieldName("timestamp")]
        public virtual Double Timestamp {
            get {
                return this._Timestamp;
            }
            set {
                this._Timestamp = value;
            }
        }
        
        [FieldName("ipSrc")]
        public virtual String IpSrc {
            get {
                return this._IpSrc;
            }
            set {
                this._IpSrc = value;
            }
        }
        
        [FieldName("ipDst")]
        public virtual String IpDst {
            get {
                return this._IpDst;
            }
            set {
                this._IpDst = value;
            }
        }
        
        [FieldName("tcpSrcport")]
        public virtual Int32 TcpSrcport {
            get {
                return this._TcpSrcport;
            }
            set {
                this._TcpSrcport = value;
            }
        }
        
        [FieldName("tcpDstport")]
        public virtual Int32 TcpDstport {
            get {
                return this._TcpDstport;
            }
            set {
                this._TcpDstport = value;
            }
        }
        
        [FieldName("tlsHandshake")]
        public virtual TlsHandshake TlsHandshake {
            get {
                return this._TlsHandshake;
            }
            set {
                this._TlsHandshake = value;
            }
        }
        
        [FieldName("dnsContext")]
        public virtual DnsQueryResponse DnsContext {
            get {
                return this._DnsContext;
            }
            set {
                this._DnsContext = value;
            }
        }
        
        public override string Name {
            get {
                return "TlsWithDnsContextEvent";
            }
        }
        
        public override string Message {
            get {
                return string.Format("TLS flow {0}:{1}->{2}:{3} ({4}) with DNS context {5} found.", Distance.Utils.StringUtils.ToString(this.IpSrc), Distance.Utils.StringUtils.ToString(this.TcpSrcport), Distance.Utils.StringUtils.ToString(this.IpDst), Distance.Utils.StringUtils.ToString(this.TcpDstport), Distance.Utils.StringUtils.ToString(this.Timestamp), Distance.Utils.StringUtils.ToString(this.DnsContext));
            }
        }
        
        public override Distance.Runtime.EventSeverity Severity {
            get {
                return Distance.Runtime.EventSeverity.Error;
            }
        }
        
        public override string ToString() {
            return string.Format("TlsWithDnsContextEvent: timestamp={0} ipSrc={1} ipDst={2} tcpSrcport={3} tcpDstpo" +
                    "rt={4} tlsHandshake={5} dnsContext={6}", Distance.Utils.StringUtils.ToString(this.Timestamp), Distance.Utils.StringUtils.ToString(this.IpSrc), Distance.Utils.StringUtils.ToString(this.IpDst), Distance.Utils.StringUtils.ToString(this.TcpSrcport), Distance.Utils.StringUtils.ToString(this.TcpDstport), Distance.Utils.StringUtils.ToString(this.TlsHandshake), Distance.Utils.StringUtils.ToString(this.DnsContext));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Timestamp, this.IpSrc, this.IpDst, this.TcpSrcport, this.TcpDstport, this.TlsHandshake, this.DnsContext);
        }
        
        public override bool Equals(object obj) {
            TlsWithDnsContextEvent that = obj as TlsWithDnsContextEvent;
            return ((((((((that != null) 
                        && object.Equals(this.Timestamp, that.Timestamp)) 
                        && object.Equals(this.IpSrc, that.IpSrc)) 
                        && object.Equals(this.IpDst, that.IpDst)) 
                        && object.Equals(this.TcpSrcport, that.TcpSrcport)) 
                        && object.Equals(this.TcpDstport, that.TcpDstport)) 
                        && object.Equals(this.TlsHandshake, that.TlsHandshake)) 
                        && object.Equals(this.DnsContext, that.DnsContext));
        }
    }
}
