//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Distance.Diagnostics.Dns {
    using Distance.Runtime;
    using Distance.Utils;
    using System;
    
    
    public partial class DnsPacket : Distance.Runtime.DistanceFact {
        
        private Int32 _FrameNumber;
        
        private Double _FrameTimeRelative;
        
        private String _IpSrc;
        
        private String _IpDst;
        
        private String _DnsId;
        
        private Boolean _DnsFlagsResponse;
        
        private Int32 _DnsFlagsRcode;
        
        private Double _DnsTime;
        
        private String _DnsQryName;
        
        private String _DnsA;
        
        public static string Filter = "dns";
        
        public static string[] Fields = new string[] {
                "frame.number",
                "frame.time_relative",
                "ip.src",
                "ip.dst",
                "dns.id",
                "dns.flags.response",
                "dns.flags.rcode",
                "dns.time",
                "dns.qry.name",
                "dns.a"};
        
        [FieldName("frame.number")]
        public virtual Int32 FrameNumber {
            get {
                return this._FrameNumber;
            }
            set {
                this._FrameNumber = value;
            }
        }
        
        [FieldName("frame.time_relative")]
        public virtual Double FrameTimeRelative {
            get {
                return this._FrameTimeRelative;
            }
            set {
                this._FrameTimeRelative = value;
            }
        }
        
        [FieldName("ip.src")]
        public virtual String IpSrc {
            get {
                return this._IpSrc;
            }
            set {
                this._IpSrc = value;
            }
        }
        
        [FieldName("ip.dst")]
        public virtual String IpDst {
            get {
                return this._IpDst;
            }
            set {
                this._IpDst = value;
            }
        }
        
        [FieldName("dns.id")]
        public virtual String DnsId {
            get {
                return this._DnsId;
            }
            set {
                this._DnsId = value;
            }
        }
        
        [FieldName("dns.flags.response")]
        public virtual Boolean DnsFlagsResponse {
            get {
                return this._DnsFlagsResponse;
            }
            set {
                this._DnsFlagsResponse = value;
            }
        }
        
        [FieldName("dns.flags.rcode")]
        public virtual Int32 DnsFlagsRcode {
            get {
                return this._DnsFlagsRcode;
            }
            set {
                this._DnsFlagsRcode = value;
            }
        }
        
        [FieldName("dns.time")]
        public virtual Double DnsTime {
            get {
                return this._DnsTime;
            }
            set {
                this._DnsTime = value;
            }
        }
        
        [FieldName("dns.qry.name")]
        public virtual String DnsQryName {
            get {
                return this._DnsQryName;
            }
            set {
                this._DnsQryName = value;
            }
        }
        
        [FieldName("dns.a")]
        public virtual String DnsA {
            get {
                return this._DnsA;
            }
            set {
                this._DnsA = value;
            }
        }
        
        public override string ToString() {
            return string.Format("DnsPacket: frame.number={0} frame.time_relative={1} ip.src={2} ip.dst={3} dns.id=" +
                    "{4} dns.flags.response={5} dns.flags.rcode={6} dns.time={7} dns.qry.name={8} dns" +
                    ".a={9}", Distance.Utils.StringUtils.ToString(this.FrameNumber), Distance.Utils.StringUtils.ToString(this.FrameTimeRelative), Distance.Utils.StringUtils.ToString(this.IpSrc), Distance.Utils.StringUtils.ToString(this.IpDst), Distance.Utils.StringUtils.ToString(this.DnsId), Distance.Utils.StringUtils.ToString(this.DnsFlagsResponse), Distance.Utils.StringUtils.ToString(this.DnsFlagsRcode), Distance.Utils.StringUtils.ToString(this.DnsTime), Distance.Utils.StringUtils.ToString(this.DnsQryName), Distance.Utils.StringUtils.ToString(this.DnsA));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.FrameNumber, this.FrameTimeRelative, this.IpSrc, this.IpDst, this.DnsId, this.DnsFlagsResponse, this.DnsFlagsRcode, this.DnsTime, this.DnsQryName, this.DnsA);
        }
        
        public override bool Equals(object obj) {
            DnsPacket that = obj as DnsPacket;
            return (((((((((((that != null) 
                        && object.Equals(this.FrameNumber, that.FrameNumber)) 
                        && object.Equals(this.FrameTimeRelative, that.FrameTimeRelative)) 
                        && object.Equals(this.IpSrc, that.IpSrc)) 
                        && object.Equals(this.IpDst, that.IpDst)) 
                        && object.Equals(this.DnsId, that.DnsId)) 
                        && object.Equals(this.DnsFlagsResponse, that.DnsFlagsResponse)) 
                        && object.Equals(this.DnsFlagsRcode, that.DnsFlagsRcode)) 
                        && object.Equals(this.DnsTime, that.DnsTime)) 
                        && object.Equals(this.DnsQryName, that.DnsQryName)) 
                        && object.Equals(this.DnsA, that.DnsA));
        }
        
        public static DnsPacket Create(System.Func<string, string, string> mapper, string[] values) {
            DnsPacket newObj = new DnsPacket();
            newObj._FrameNumber = mapper.Invoke("frame.number", values[0]).ToInt32();
            newObj._FrameTimeRelative = mapper.Invoke("frame.time_relative", values[1]).ToDouble();
            newObj._IpSrc = mapper.Invoke("ip.src", values[2]).ToString();
            newObj._IpDst = mapper.Invoke("ip.dst", values[3]).ToString();
            newObj._DnsId = mapper.Invoke("dns.id", values[4]).ToString();
            newObj._DnsFlagsResponse = mapper.Invoke("dns.flags.response", values[5]).ToBoolean();
            newObj._DnsFlagsRcode = mapper.Invoke("dns.flags.rcode", values[6]).ToInt32();
            newObj._DnsTime = mapper.Invoke("dns.time", values[7]).ToDouble();
            newObj._DnsQryName = mapper.Invoke("dns.qry.name", values[8]).ToString();
            newObj._DnsA = mapper.Invoke("dns.a", values[9]).ToString();
            return newObj;
        }
    }
    
    public partial class DnsQueryResponse : Distance.Runtime.DistanceDerived {
        
        private DnsPacket _Query;
        
        private DnsPacket _Response;
        
        [FieldName("query")]
        public virtual DnsPacket Query {
            get {
                return this._Query;
            }
            set {
                this._Query = value;
            }
        }
        
        [FieldName("response")]
        public virtual DnsPacket Response {
            get {
                return this._Response;
            }
            set {
                this._Response = value;
            }
        }
        
        public override string ToString() {
            return string.Format("DnsQueryResponse: query={0} response={1}", Distance.Utils.StringUtils.ToString(this.Query), Distance.Utils.StringUtils.ToString(this.Response));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Query, this.Response);
        }
        
        public override bool Equals(object obj) {
            DnsQueryResponse that = obj as DnsQueryResponse;
            return (((that != null) 
                        && object.Equals(this.Query, that.Query)) 
                        && object.Equals(this.Response, that.Response));
        }
    }
    
    public partial class ResponseError : Distance.Runtime.DistanceDerived {
        
        private DnsPacket _Query;
        
        private DnsPacket _Response;
        
        [FieldName("query")]
        public virtual DnsPacket Query {
            get {
                return this._Query;
            }
            set {
                this._Query = value;
            }
        }
        
        [FieldName("response")]
        public virtual DnsPacket Response {
            get {
                return this._Response;
            }
            set {
                this._Response = value;
            }
        }
        
        public override string ToString() {
            return string.Format("ResponseError: query={0} response={1}", Distance.Utils.StringUtils.ToString(this.Query), Distance.Utils.StringUtils.ToString(this.Response));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Query, this.Response);
        }
        
        public override bool Equals(object obj) {
            ResponseError that = obj as ResponseError;
            return (((that != null) 
                        && object.Equals(this.Query, that.Query)) 
                        && object.Equals(this.Response, that.Response));
        }
    }
    
    public partial class NoResponse : Distance.Runtime.DistanceDerived {
        
        private DnsPacket _Query;
        
        [FieldName("query")]
        public virtual DnsPacket Query {
            get {
                return this._Query;
            }
            set {
                this._Query = value;
            }
        }
        
        public override string ToString() {
            return string.Format("NoResponse: query={0}", Distance.Utils.StringUtils.ToString(this.Query));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Query);
        }
        
        public override bool Equals(object obj) {
            NoResponse that = obj as NoResponse;
            return ((that != null) 
                        && object.Equals(this.Query, that.Query));
        }
    }
    
    public partial class LateResponse : Distance.Runtime.DistanceDerived {
        
        private DnsPacket _Query;
        
        private DnsPacket _Response;
        
        private Double _Delay;
        
        [FieldName("query")]
        public virtual DnsPacket Query {
            get {
                return this._Query;
            }
            set {
                this._Query = value;
            }
        }
        
        [FieldName("response")]
        public virtual DnsPacket Response {
            get {
                return this._Response;
            }
            set {
                this._Response = value;
            }
        }
        
        [FieldName("delay")]
        public virtual Double Delay {
            get {
                return this._Delay;
            }
            set {
                this._Delay = value;
            }
        }
        
        public override string ToString() {
            return string.Format("LateResponse: query={0} response={1} delay={2}", Distance.Utils.StringUtils.ToString(this.Query), Distance.Utils.StringUtils.ToString(this.Response), Distance.Utils.StringUtils.ToString(this.Delay));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Query, this.Response, this.Delay);
        }
        
        public override bool Equals(object obj) {
            LateResponse that = obj as LateResponse;
            return ((((that != null) 
                        && object.Equals(this.Query, that.Query)) 
                        && object.Equals(this.Response, that.Response)) 
                        && object.Equals(this.Delay, that.Delay));
        }
    }
    
    public partial class DnsServer : Distance.Runtime.DistanceDerived {
        
        private String _IpAddress;
        
        [FieldName("ip.address")]
        public virtual String IpAddress {
            get {
                return this._IpAddress;
            }
            set {
                this._IpAddress = value;
            }
        }
        
        public override string ToString() {
            return string.Format("DnsServer: ip.address={0}", Distance.Utils.StringUtils.ToString(this.IpAddress));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.IpAddress);
        }
        
        public override bool Equals(object obj) {
            DnsServer that = obj as DnsServer;
            return ((that != null) 
                        && object.Equals(this.IpAddress, that.IpAddress));
        }
    }
    
    public partial class DnsServerDownEvent : Distance.Runtime.DistanceEvent {
        
        private DnsServer _Server;
        
        [FieldName("server")]
        public virtual DnsServer Server {
            get {
                return this._Server;
            }
            set {
                this._Server = value;
            }
        }
        
        public override string Name {
            get {
                return "DnsServerDownEvent";
            }
        }
        
        public override string Message {
            get {
                return string.Format("DNS server {0} is down or invalid.", Distance.Utils.StringUtils.ToString(this.Server));
            }
        }
        
        public override Distance.Runtime.EventSeverity Severity {
            get {
                return Distance.Runtime.EventSeverity.Error;
            }
        }
        
        public override string ToString() {
            return string.Format("DnsServerDownEvent: server={0}", Distance.Utils.StringUtils.ToString(this.Server));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Server);
        }
        
        public override bool Equals(object obj) {
            DnsServerDownEvent that = obj as DnsServerDownEvent;
            return ((that != null) 
                        && object.Equals(this.Server, that.Server));
        }
    }
    
    public partial class DnsServerUnreliableEvent : Distance.Runtime.DistanceEvent {
        
        private DnsServer _Server;
        
        [FieldName("server")]
        public virtual DnsServer Server {
            get {
                return this._Server;
            }
            set {
                this._Server = value;
            }
        }
        
        public override string Name {
            get {
                return "DnsServerUnreliableEvent";
            }
        }
        
        public override string Message {
            get {
                return string.Format("DNS server {0} is busy.", Distance.Utils.StringUtils.ToString(this.Server));
            }
        }
        
        public override Distance.Runtime.EventSeverity Severity {
            get {
                return Distance.Runtime.EventSeverity.Error;
            }
        }
        
        public override string ToString() {
            return string.Format("DnsServerUnreliableEvent: server={0}", Distance.Utils.StringUtils.ToString(this.Server));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Server);
        }
        
        public override bool Equals(object obj) {
            DnsServerUnreliableEvent that = obj as DnsServerUnreliableEvent;
            return ((that != null) 
                        && object.Equals(this.Server, that.Server));
        }
    }
}
