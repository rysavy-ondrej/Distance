//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Distance.Diagnostics.Icmp {
    using Distance.Runtime;
    using Distance.Utils;
    using System;
    
    
    public class IcmpPacket : Distance.Runtime.DistanceFact {
        
        private Int32 _FrameNumber;
        
        private String _IpSrc;
        
        private String _IpDst;
        
        private Int32 _IcmpType;
        
        private Int32 _IcmpCode;
        
        private Int32 _IcmpIdent;
        
        private Int32 _IcmpSeq;
        
        public static string Filter = "icmp";
        
        public static string[] Fields = new string[] {
                "frame.number",
                "ip.src",
                "ip.dst",
                "icmp.type",
                "icmp.code",
                "icmp.ident",
                "icmp.seq"};
        
        [FieldName("frame.number")]
        public virtual Int32 FrameNumber {
            get {
                return this._FrameNumber;
            }
            set {
                this._FrameNumber = value;
            }
        }
        
        [FieldName("ip.src")]
        public virtual String IpSrc {
            get {
                return this._IpSrc;
            }
            set {
                this._IpSrc = value;
            }
        }
        
        [FieldName("ip.dst")]
        public virtual String IpDst {
            get {
                return this._IpDst;
            }
            set {
                this._IpDst = value;
            }
        }
        
        [FieldName("icmp.type")]
        public virtual Int32 IcmpType {
            get {
                return this._IcmpType;
            }
            set {
                this._IcmpType = value;
            }
        }
        
        [FieldName("icmp.code")]
        public virtual Int32 IcmpCode {
            get {
                return this._IcmpCode;
            }
            set {
                this._IcmpCode = value;
            }
        }
        
        [FieldName("icmp.ident")]
        public virtual Int32 IcmpIdent {
            get {
                return this._IcmpIdent;
            }
            set {
                this._IcmpIdent = value;
            }
        }
        
        [FieldName("icmp.seq")]
        public virtual Int32 IcmpSeq {
            get {
                return this._IcmpSeq;
            }
            set {
                this._IcmpSeq = value;
            }
        }
        
        public override string ToString() {
            return string.Format("IcmpPacket: frame.number={0} ip.src={1} ip.dst={2} icmp.type={3} icmp.code={4} ic" +
                    "mp.ident={5} icmp.seq={6}", this.FrameNumber, this.IpSrc, this.IpDst, this.IcmpType, this.IcmpCode, this.IcmpIdent, this.IcmpSeq);
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.FrameNumber, this.IpSrc, this.IpDst, this.IcmpType, this.IcmpCode, this.IcmpIdent, this.IcmpSeq);
        }
        
        public override bool Equals(object obj) {
            IcmpPacket that = obj as IcmpPacket;
            return ((((((((that != null) 
                        && object.Equals(this.FrameNumber, that.FrameNumber)) 
                        && object.Equals(this.IpSrc, that.IpSrc)) 
                        && object.Equals(this.IpDst, that.IpDst)) 
                        && object.Equals(this.IcmpType, that.IcmpType)) 
                        && object.Equals(this.IcmpCode, that.IcmpCode)) 
                        && object.Equals(this.IcmpIdent, that.IcmpIdent)) 
                        && object.Equals(this.IcmpSeq, that.IcmpSeq));
        }
        
        public static IcmpPacket Create(System.Func<string, string, string> mapper, string[] values) {
            IcmpPacket newObj = new IcmpPacket();
            newObj._FrameNumber = mapper.Invoke("frame.number", values[0]).ToInt32();
            newObj._IpSrc = mapper.Invoke("ip.src", values[1]).ToString();
            newObj._IpDst = mapper.Invoke("ip.dst", values[2]).ToString();
            newObj._IcmpType = mapper.Invoke("icmp.type", values[3]).ToInt32();
            newObj._IcmpCode = mapper.Invoke("icmp.code", values[4]).ToInt32();
            newObj._IcmpIdent = mapper.Invoke("icmp.ident", values[5]).ToInt32();
            newObj._IcmpSeq = mapper.Invoke("icmp.seq", values[6]).ToInt32();
            return newObj;
        }
    }
    
    public class IcmpDestinationUnreachable : Distance.Runtime.DistanceDerived {
        
        private IcmpPacket _Packet;
        
        private Int32 _Code;
        
        [FieldName("packet")]
        public virtual IcmpPacket Packet {
            get {
                return this._Packet;
            }
            set {
                this._Packet = value;
            }
        }
        
        [FieldName("code")]
        public virtual Int32 Code {
            get {
                return this._Code;
            }
            set {
                this._Code = value;
            }
        }
        
        public override string ToString() {
            return string.Format("IcmpDestinationUnreachable: packet={0} code={1}", this.Packet, this.Code);
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Packet, this.Code);
        }
        
        public override bool Equals(object obj) {
            IcmpDestinationUnreachable that = obj as IcmpDestinationUnreachable;
            return (((that != null) 
                        && object.Equals(this.Packet, that.Packet)) 
                        && object.Equals(this.Code, that.Code));
        }
    }
    
    public class TtlExpired : Distance.Runtime.DistanceDerived {
        
        private IcmpPacket _Packet;
        
        [FieldName("packet")]
        public virtual IcmpPacket Packet {
            get {
                return this._Packet;
            }
            set {
                this._Packet = value;
            }
        }
        
        public override string ToString() {
            return string.Format("TtlExpired: packet={0}", this.Packet);
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Packet);
        }
        
        public override bool Equals(object obj) {
            TtlExpired that = obj as TtlExpired;
            return ((that != null) 
                        && object.Equals(this.Packet, that.Packet));
        }
    }
}
