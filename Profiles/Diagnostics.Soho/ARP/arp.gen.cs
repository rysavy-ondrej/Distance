//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Distance.Diagnostics.Arp {
    using Distance.Runtime;
    using Distance.Utils;
    using System;
    
    
    public partial class ArpPacket : Distance.Runtime.DistanceFact {
        
        private Int32 _FrameNumber;
        
        private Double _FrameTimeRelative;
        
        private String _EthSrc;
        
        private String _EthDst;
        
        private Int32 _ArpOpcode;
        
        private String _ArpSrcHwMac;
        
        private String _ArpDstHwMac;
        
        private String _ArpSrcProtoIpv4;
        
        private String _ArpDstProtoIpv4;
        
        private String _EthPadding;
        
        public static string Filter = "arp";
        
        public static string[] Fields = new string[] {
                "frame.number",
                "frame.time_relative",
                "eth.src",
                "eth.dst",
                "arp.opcode",
                "arp.src.hw_mac",
                "arp.dst.hw_mac",
                "arp.src.proto_ipv4",
                "arp.dst.proto_ipv4",
                "eth.padding"};
        
        [FieldName("frame.number")]
        public virtual Int32 FrameNumber {
            get {
                return this._FrameNumber;
            }
            set {
                this._FrameNumber = value;
            }
        }
        
        [FieldName("frame.time_relative")]
        public virtual Double FrameTimeRelative {
            get {
                return this._FrameTimeRelative;
            }
            set {
                this._FrameTimeRelative = value;
            }
        }
        
        [FieldName("eth.src")]
        public virtual String EthSrc {
            get {
                return this._EthSrc;
            }
            set {
                this._EthSrc = value;
            }
        }
        
        [FieldName("eth.dst")]
        public virtual String EthDst {
            get {
                return this._EthDst;
            }
            set {
                this._EthDst = value;
            }
        }
        
        [FieldName("arp.opcode")]
        public virtual Int32 ArpOpcode {
            get {
                return this._ArpOpcode;
            }
            set {
                this._ArpOpcode = value;
            }
        }
        
        [FieldName("arp.src.hw_mac")]
        public virtual String ArpSrcHwMac {
            get {
                return this._ArpSrcHwMac;
            }
            set {
                this._ArpSrcHwMac = value;
            }
        }
        
        [FieldName("arp.dst.hw_mac")]
        public virtual String ArpDstHwMac {
            get {
                return this._ArpDstHwMac;
            }
            set {
                this._ArpDstHwMac = value;
            }
        }
        
        [FieldName("arp.src.proto_ipv4")]
        public virtual String ArpSrcProtoIpv4 {
            get {
                return this._ArpSrcProtoIpv4;
            }
            set {
                this._ArpSrcProtoIpv4 = value;
            }
        }
        
        [FieldName("arp.dst.proto_ipv4")]
        public virtual String ArpDstProtoIpv4 {
            get {
                return this._ArpDstProtoIpv4;
            }
            set {
                this._ArpDstProtoIpv4 = value;
            }
        }
        
        [FieldName("eth.padding")]
        public virtual String EthPadding {
            get {
                return this._EthPadding;
            }
            set {
                this._EthPadding = value;
            }
        }
        
        public override string ToString() {
            return string.Format("ArpPacket: frame.number={0} frame.time_relative={1} eth.src={2} eth.dst={3} arp.o" +
                    "pcode={4} arp.src.hw_mac={5} arp.dst.hw_mac={6} arp.src.proto_ipv4={7} arp.dst.p" +
                    "roto_ipv4={8} eth.padding={9}", Distance.Utils.StringUtils.ToString(this.FrameNumber), Distance.Utils.StringUtils.ToString(this.FrameTimeRelative), Distance.Utils.StringUtils.ToString(this.EthSrc), Distance.Utils.StringUtils.ToString(this.EthDst), Distance.Utils.StringUtils.ToString(this.ArpOpcode), Distance.Utils.StringUtils.ToString(this.ArpSrcHwMac), Distance.Utils.StringUtils.ToString(this.ArpDstHwMac), Distance.Utils.StringUtils.ToString(this.ArpSrcProtoIpv4), Distance.Utils.StringUtils.ToString(this.ArpDstProtoIpv4), Distance.Utils.StringUtils.ToString(this.EthPadding));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.FrameNumber, this.FrameTimeRelative, this.EthSrc, this.EthDst, this.ArpOpcode, this.ArpSrcHwMac, this.ArpDstHwMac, this.ArpSrcProtoIpv4, this.ArpDstProtoIpv4, this.EthPadding);
        }
        
        public override bool Equals(object obj) {
            ArpPacket that = obj as ArpPacket;
            return (((((((((((that != null) 
                        && object.Equals(this.FrameNumber, that.FrameNumber)) 
                        && object.Equals(this.FrameTimeRelative, that.FrameTimeRelative)) 
                        && object.Equals(this.EthSrc, that.EthSrc)) 
                        && object.Equals(this.EthDst, that.EthDst)) 
                        && object.Equals(this.ArpOpcode, that.ArpOpcode)) 
                        && object.Equals(this.ArpSrcHwMac, that.ArpSrcHwMac)) 
                        && object.Equals(this.ArpDstHwMac, that.ArpDstHwMac)) 
                        && object.Equals(this.ArpSrcProtoIpv4, that.ArpSrcProtoIpv4)) 
                        && object.Equals(this.ArpDstProtoIpv4, that.ArpDstProtoIpv4)) 
                        && object.Equals(this.EthPadding, that.EthPadding));
        }
        
        public static ArpPacket Create(System.Func<string, string, string> mapper, string[] values) {
            ArpPacket newObj = new ArpPacket();
            newObj._FrameNumber = mapper.Invoke("frame.number", values[0]).ToInt32();
            newObj._FrameTimeRelative = mapper.Invoke("frame.time_relative", values[1]).ToDouble();
            newObj._EthSrc = mapper.Invoke("eth.src", values[2]).ToString();
            newObj._EthDst = mapper.Invoke("eth.dst", values[3]).ToString();
            newObj._ArpOpcode = mapper.Invoke("arp.opcode", values[4]).ToInt32();
            newObj._ArpSrcHwMac = mapper.Invoke("arp.src.hw_mac", values[5]).ToString();
            newObj._ArpDstHwMac = mapper.Invoke("arp.dst.hw_mac", values[6]).ToString();
            newObj._ArpSrcProtoIpv4 = mapper.Invoke("arp.src.proto_ipv4", values[7]).ToString();
            newObj._ArpDstProtoIpv4 = mapper.Invoke("arp.dst.proto_ipv4", values[8]).ToString();
            newObj._EthPadding = mapper.Invoke("eth.padding", values[9]).ToString();
            return newObj;
        }
    }
    
    public partial class ArpRequestReply : Distance.Runtime.DistanceDerived {
        
        private ArpPacket _Request;
        
        private ArpPacket _Reply;
        
        [FieldName("request")]
        public virtual ArpPacket Request {
            get {
                return this._Request;
            }
            set {
                this._Request = value;
            }
        }
        
        [FieldName("reply")]
        public virtual ArpPacket Reply {
            get {
                return this._Reply;
            }
            set {
                this._Reply = value;
            }
        }
        
        public override string ToString() {
            return string.Format("ArpRequestReply: request={0} reply={1}", Distance.Utils.StringUtils.ToString(this.Request), Distance.Utils.StringUtils.ToString(this.Reply));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Request, this.Reply);
        }
        
        public override bool Equals(object obj) {
            ArpRequestReply that = obj as ArpRequestReply;
            return (((that != null) 
                        && object.Equals(this.Request, that.Request)) 
                        && object.Equals(this.Reply, that.Reply));
        }
    }
    
    public partial class ArpUnanswered : Distance.Runtime.DistanceDerived {
        
        private ArpPacket _Request;
        
        [FieldName("request")]
        public virtual ArpPacket Request {
            get {
                return this._Request;
            }
            set {
                this._Request = value;
            }
        }
        
        public override string ToString() {
            return string.Format("ArpUnanswered: request={0}", Distance.Utils.StringUtils.ToString(this.Request));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Request);
        }
        
        public override bool Equals(object obj) {
            ArpUnanswered that = obj as ArpUnanswered;
            return ((that != null) 
                        && object.Equals(this.Request, that.Request));
        }
    }
    
    public partial class ArpGratuitous : Distance.Runtime.DistanceDerived {
        
        private ArpPacket _Request;
        
        private ArpPacket _Reply;
        
        [FieldName("request")]
        public virtual ArpPacket Request {
            get {
                return this._Request;
            }
            set {
                this._Request = value;
            }
        }
        
        [FieldName("reply")]
        public virtual ArpPacket Reply {
            get {
                return this._Reply;
            }
            set {
                this._Reply = value;
            }
        }
        
        public override string ToString() {
            return string.Format("ArpGratuitous: request={0} reply={1}", Distance.Utils.StringUtils.ToString(this.Request), Distance.Utils.StringUtils.ToString(this.Reply));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.Request, this.Reply);
        }
        
        public override bool Equals(object obj) {
            ArpGratuitous that = obj as ArpGratuitous;
            return (((that != null) 
                        && object.Equals(this.Request, that.Request)) 
                        && object.Equals(this.Reply, that.Reply));
        }
    }
    
    public partial class ArpAddressMapping : Distance.Runtime.DistanceDerived {
        
        private String _IpAddr;
        
        private String _EthAddr;
        
        [FieldName("ip.addr")]
        public virtual String IpAddr {
            get {
                return this._IpAddr;
            }
            set {
                this._IpAddr = value;
            }
        }
        
        [FieldName("eth.addr")]
        public virtual String EthAddr {
            get {
                return this._EthAddr;
            }
            set {
                this._EthAddr = value;
            }
        }
        
        public override string ToString() {
            return string.Format("ArpAddressMapping: ip.addr={0} eth.addr={1}", Distance.Utils.StringUtils.ToString(this.IpAddr), Distance.Utils.StringUtils.ToString(this.EthAddr));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.IpAddr, this.EthAddr);
        }
        
        public override bool Equals(object obj) {
            ArpAddressMapping that = obj as ArpAddressMapping;
            return (((that != null) 
                        && object.Equals(this.IpAddr, that.IpAddr)) 
                        && object.Equals(this.EthAddr, that.EthAddr));
        }
    }
    
    public partial class ArpAddressConflict : Distance.Runtime.DistanceEvent {
        
        private String _IpAddress;
        
        private String[] _EthAddresses;
        
        [FieldName("ip.address")]
        public virtual String IpAddress {
            get {
                return this._IpAddress;
            }
            set {
                this._IpAddress = value;
            }
        }
        
        [FieldName("eth.addresses")]
        public virtual String[] EthAddresses {
            get {
                return this._EthAddresses;
            }
            set {
                this._EthAddresses = value;
            }
        }
        
        public override string Name {
            get {
                return "ArpAddressConflict";
            }
        }
        
        public override string Message {
            get {
                return string.Format("Two or more network hosts claimed ownership of the same network address {0}: {1}." +
                        " Invalid IP address configuration or ARP spoofing is in progress.", Distance.Utils.StringUtils.ToString(this.IpAddress), Distance.Utils.StringUtils.ToString(this.EthAddresses));
            }
        }
        
        public override Distance.Runtime.EventSeverity Severity {
            get {
                return Distance.Runtime.EventSeverity.Error;
            }
        }
        
        public override string ToString() {
            return string.Format("ArpAddressConflict: ip.address={0} eth.addresses={1}", Distance.Utils.StringUtils.ToString(this.IpAddress), Distance.Utils.StringUtils.ToString(this.EthAddresses));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.IpAddress, this.EthAddresses);
        }
        
        public override bool Equals(object obj) {
            ArpAddressConflict that = obj as ArpAddressConflict;
            return (((that != null) 
                        && object.Equals(this.IpAddress, that.IpAddress)) 
                        && object.Equals(this.EthAddresses, that.EthAddresses));
        }
    }
    
    public partial class ArpSweepAttempt : Distance.Runtime.DistanceEvent {
        
        private String _IpAddress;
        
        private String[] _IpTargets;
        
        [FieldName("ip.address")]
        public virtual String IpAddress {
            get {
                return this._IpAddress;
            }
            set {
                this._IpAddress = value;
            }
        }
        
        [FieldName("ip.targets")]
        public virtual String[] IpTargets {
            get {
                return this._IpTargets;
            }
            set {
                this._IpTargets = value;
            }
        }
        
        public override string Name {
            get {
                return "ArpSweepAttempt";
            }
        }
        
        public override string Message {
            get {
                return string.Format("Host {0} performs ARP Sweep that allows to enumerate live hosts in the local netw" +
                        "ork using ARP requests send to targets: [{1}].", Distance.Utils.StringUtils.ToString(this.IpAddress), Distance.Utils.StringUtils.ToString(this.IpTargets));
            }
        }
        
        public override Distance.Runtime.EventSeverity Severity {
            get {
                return Distance.Runtime.EventSeverity.Warning;
            }
        }
        
        public override string ToString() {
            return string.Format("ArpSweepAttempt: ip.address={0} ip.targets={1}", Distance.Utils.StringUtils.ToString(this.IpAddress), Distance.Utils.StringUtils.ToString(this.IpTargets));
        }
        
        public override int GetHashCode() {
            return Distance.Utils.HashFunction.GetHashCode(this.IpAddress, this.IpTargets);
        }
        
        public override bool Equals(object obj) {
            ArpSweepAttempt that = obj as ArpSweepAttempt;
            return (((that != null) 
                        && object.Equals(this.IpAddress, that.IpAddress)) 
                        && object.Equals(this.IpTargets, that.IpTargets));
        }
    }
}
